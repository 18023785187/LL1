const grammars =
  [
    `Sentence         ->  SingleStatement Semicolon Sentence | null`,
    'SingleStatement  ->  Defined | Function | Assignment | Literal',
    'Semicolon        ->  semicolon Semicolon`',
    'Semicolon`       ->  semicolon Semicolon` | null',
    'Expression       ->  AddExpression',
    'AddExpression    ->  MulExpression AddExpression1',
    'AddExpression1   ->  Operator1 MulExpression $binaryExpression AddExpression1 | null',
    `MulExpression    ->  Identifier MulExpression' | Literal MulExpression1`,
    `MulExpression'   ->  MulExpression1 | CallSuffix MulExpression1`,
    'MulExpression1   ->  Operator2 MulExpression2 | null',
    `MulExpression2   ->  Identifier MulExpression'' | Literal $binaryExpression MulExpression1`,
    `MulExpression''  ->  $binaryExpression MulExpression1 | CallSuffix $binaryExpression MulExpression1`,
    'Operator1        ->  plus | minus',
    'Operator2        ->  multiply | divide',
    'Literal          ->  literal | leftBracket AddExpression rightBracket | Operator1 literal $unaryExpression',
    'Identifier       ->  identifier',
    "Defined          ->  defined Identifier Defined'",
    `Defined'         ->  equal Expression $declarationInit | $declaration null`,
    'Assignment       ->  Identifier Assignment1',
    'Assignment1      ->  $expressionStatement equal Expression $assignment | CallSuffix | null',
    "Block            ->  begin $appendBlock Sentence Block'",
    "Block'           ->  end $popBlock | return SingleStatement $assignReturn Semicolon end $popBlock",
    "Function         ->  function identifier $assignFunctionId leftBracket Params rightBracket colon Block $assignFunctionBody",
    "Arguments        ->  Expression $assignArgument Arguments' | null",
    "Arguments'       ->  Comma Expression $assignArgument | null",
    "Params           ->  Identifier $assignParam Params' | null",
    "Params'          ->  Comma Identifier $assignParam | null",
    'Comma            ->  comma',
    'Colon            ->  colon',
    'CallSuffix       ->  $callExpression leftBracket Arguments rightBracket $expressionStatement',
  ];
const terminalSymbols =
  'defined|identifier|equal|semicolon|leftBracket|rightBracket|literal|plus|minus|multiply|divide|function|begin|end|return|comma|colon'
    .split('|');

const ll1 = makeLL1(grammars, terminalSymbols);


const grammars =
  [
    `Sentence         ->  SingleStatement Semicolon Sentence | null`,
    'SingleStatement  ->  Defined | Function | Assignment | Literal',
    'Semicolon        ->  semicolon Semicolon`',
    'Semicolon`       ->  semicolon Semicolon` | null',
    'Expression       ->  AddExpression',
    'AddExpression    ->  MulExpression AddExpression1',
    'AddExpression1   ->  Operator1 MulExpression $binaryExpression AddExpression1 | null',
    'MulExpression    ->  Identifier MulExpression1 | Literal MulExpression1',
    'MulExpression1   ->  Operator2 MulExpression2 | null',
    'MulExpression2   ->  Identifier $binaryExpression MulExpression1 | Literal $binaryExpression MulExpression1',
    'Operator1        ->  plus | minus',
    'Operator2        ->  multiply | divide',
    'Literal          ->  literal | leftBracket AddExpression rightBracket | Operator1 Literal1',
    `Literal1         ->  literal $unaryExpression | Identifier $unaryExpression`,
    'Identifier       ->  identifier',
    "Defined          ->  defined Identifier Defined'",
    `Defined'         ->  equal Expression $declarationInit | $declaration null`,
    'Assignment       ->  Identifier Assignment1',
    'Assignment1      ->  $expressionStatement equal Expression $assignment | $callExpression leftBracket Arguments rightBracket $expressionStatement | null',
    "Block            ->  begin $appendBlock Sentence Block'",
    "Block'           ->  end $popBlock | return SingleStatement $assignReturn Semicolon end $popBlock",
    "Function         ->  function identifier $assignFunctionId leftBracket Params rightBracket colon Block $assignFunctionBody",
    "Arguments        ->  Expression $assignArgument Arguments' | null",
    "Arguments'       ->  comma Expression $assignArgument Arguments' | null",
    "Params           ->  Identifier $assignParam Params' | null",
    "Params'          ->  comma Identifier $assignParam | null",
    'Comma            ->  comma',
    'Colon            ->  colon',
  ];
const terminalSymbols =
  'defined|identifier|equal|semicolon|leftBracket|rightBracket|literal|plus|minus|multiply|divide|function|begin|end|return|comma|colon'
    .split('|');

const ll1 = makeLL1(grammars, terminalSymbols);